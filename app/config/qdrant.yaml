# Qdrant Performance Configuration for Multi-Agent Voice AI System
# Optimized for <15ms vector search latency with maximum throughput
# Target: Support 2000+ concurrent searches with 99.9% availability

# ============================================================================
# SERVICE CONFIGURATION
# ============================================================================
service:
  # Network settings for optimal performance
  host: "0.0.0.0"
  http_port: 6333
  grpc_port: 6334
  
  # Enable gRPC for better performance
  enable_cors: true
  cors_allow_origin: "*"
  
  # Connection limits for high concurrency
  max_request_size_mb: 32
  max_workers: 8
  
  # Telemetry and logging
  log_level: "INFO"
  telemetry:
    enabled: true
    anonymize: true

# ============================================================================
# STORAGE CONFIGURATION - ULTRA HIGH PERFORMANCE
# ============================================================================
storage:
  # Storage paths
  storage_path: "/qdrant/storage"
  snapshots_path: "/qdrant/storage/snapshots"
  temp_path: "/qdrant/storage/temp"
  
  # Performance optimization
  performance:
    # Maximum search threads for voice AI workload
    max_search_threads: 8
    max_optimization_threads: 4
    
    # Search performance tuning
    search_batch_size: 100
    
    # Memory management for low latency
    max_concurrent_searches: 1000
    search_queue_size: 10000
    
    # Indexing performance
    max_indexing_threads: 4
    indexing_queue_size: 1000

  # Memory optimization for voice AI
  on_disk_payload: false  # Keep payloads in memory for speed
  
  # Quantization for performance (with quality preservation)
  quantization:
    binary:
      always_ram: true    # Keep quantized vectors in RAM
      
    scalar:
      type: "int8"       # Balanced precision/performance
      quantile: 0.99
      always_ram: true

  # Optimizers configuration for voice AI workload
  optimizers:
    # Segment management
    deleted_threshold: 0.2
    vacuum_min_vector_number: 1000
    default_segment_number: 2      # Optimized for concurrent access
    max_segment_size: 20000        # Balanced size for performance
    
    # Memory mapping thresholds
    memmap_threshold: 20000        # Keep hot data in memory
    indexing_threshold: 10000      # Start indexing early
    
    # Flush intervals for real-time updates
    flush_interval_sec: 2          # Fast updates for voice AI
    max_optimization_threads: 4

  # HNSW index configuration for ultra-low latency
  hnsw:
    # Connection parameters optimized for voice AI
    m: 16                          # Balanced connectivity
    ef_construct: 128              # High construction quality
    full_scan_threshold: 10000     # Smart fallback to brute force
    max_indexing_threads: 4        # Parallel indexing
    
    # Search parameters
    ef: 64                         # Default search quality
    
    # Performance tuning
    on_disk: false                 # Keep HNSW graph in memory
    payload_m: 4                   # Payload connections

# ============================================================================
# CLUSTER CONFIGURATION (FOR PRODUCTION SCALING)
# ============================================================================
cluster:
  # Cluster settings for high availability
  enabled: false  # Set to true for production clusters
  
  # Node configuration
  node_id: 1
  bootstrap: true
  
  # Consensus settings
  consensus:
    tick_period_ms: 100
    bootstrap_timeout_sec: 30
    
  # P2P network configuration
  p2p:
    port: 6335
    
  # Distributed consensus
  raft:
    # Raft configuration for consistency
    heartbeat_interval_ms: 500
    election_timeout_ms: 1500
    max_message_queue_size: 10000

# ============================================================================
# COLLECTION TEMPLATES FOR AGENT TYPES
# ============================================================================
collection_templates:
  # Default template for voice AI agents
  default_voice_ai:
    vectors:
      size: 1536                   # OpenAI embedding size
      distance: "Cosine"
      on_disk: false              # Keep in memory for speed
      
    optimizers_config:
      default_segment_number: 2
      max_segment_size: 20000
      memmap_threshold: 20000
      indexing_threshold: 10000
      flush_interval_sec: 2
      max_optimization_threads: 4
      
    hnsw_config:
      m: 16
      ef_construct: 128
      full_scan_threshold: 10000
      max_indexing_threads: 4
      on_disk: false
      
    quantization_config:
      binary:
        always_ram: true
  
  # High-performance template for emergency agents
  emergency_optimized:
    vectors:
      size: 1536
      distance: "Cosine"
      on_disk: false
      
    optimizers_config:
      default_segment_number: 4    # More segments for parallel access
      max_segment_size: 15000      # Smaller segments for speed
      memmap_threshold: 15000
      indexing_threshold: 8000
      flush_interval_sec: 1        # Ultra-fast updates
      max_optimization_threads: 6
      
    hnsw_config:
      m: 32                        # Higher connectivity for accuracy
      ef_construct: 256            # Higher construction quality
      full_scan_threshold: 5000
      max_indexing_threads: 6
      on_disk: false
      
    quantization_config:
      binary:
        always_ram: true

  # Balanced template for general agents
  balanced:
    vectors:
      size: 1536
      distance: "Cosine"
      on_disk: false
      
    optimizers_config:
      default_segment_number: 2
      max_segment_size: 25000
      memmap_threshold: 25000
      indexing_threshold: 12000
      flush_interval_sec: 3
      max_optimization_threads: 2
      
    hnsw_config:
      m: 12
      ef_construct: 100
      full_scan_threshold: 15000
      max_indexing_threads: 2
      on_disk: false

# ============================================================================
# BACKUP AND RECOVERY CONFIGURATION
# ============================================================================
snapshots:
  # Snapshot settings for data safety
  snapshots_path: "/qdrant/storage/snapshots"
  
  # Automatic snapshots
  auto_snapshot:
    enabled: true
    interval_sec: 3600            # Hourly snapshots
    max_snapshots: 24             # Keep 24 hours of snapshots
    
  # Snapshot compression
  compression:
    enabled: true
    algorithm: "gzip"
    level: 6                      # Balanced compression

# ============================================================================
# MONITORING AND METRICS
# ============================================================================
telemetry:
  # Telemetry configuration
  enabled: true
  anonymize: true
  
  # Metrics collection
  metrics:
    enabled: true
    path: "/metrics"
    
    # Performance metrics
    search_latency_buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0]
    
  # Health checks
  health_check:
    enabled: true
    path: "/health"

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
security:
  # API key authentication (set via environment variables)
  api_key: null  # Set QDRANT_API_KEY environment variable
  
  # TLS configuration for production
  tls:
    enabled: false  # Enable for production
    cert_path: "/qdrant/tls/cert.pem"
    key_path: "/qdrant/tls/key.pem"
    
  # CORS settings
  cors:
    enabled: true
    allow_origin: "*"  # Restrict in production
    allow_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allow_headers: ["*"]

# ============================================================================
# ENVIRONMENT SPECIFIC OVERRIDES
# ============================================================================

# Development environment
development:
  service:
    log_level: "DEBUG"
    
  storage:
    performance:
      max_search_threads: 2
      max_optimization_threads: 1
      
  telemetry:
    enabled: true

# Production environment  
production:
  service:
    log_level: "INFO"
    max_workers: 16
    
  storage:
    performance:
      max_search_threads: 12
      max_optimization_threads: 6
      max_concurrent_searches: 2000
      
    optimizers:
      default_segment_number: 4
      flush_interval_sec: 1
      
  cluster:
    enabled: true
    
  security:
    tls:
      enabled: true
    cors:
      allow_origin: "https://yourdomain.com"
      
  snapshots:
    auto_snapshot:
      interval_sec: 1800  # 30-minute snapshots

# ============================================================================
# PERFORMANCE TUNING NOTES
# ============================================================================

# Memory Usage Optimization:
# - Keep all vectors and indices in memory (on_disk: false)
# - Use binary quantization for 8x memory reduction
# - Configure appropriate memmap thresholds

# Search Latency Optimization:
# - Increased max_search_threads for high concurrency
# - Optimized HNSW parameters (m=16, ef_construct=128)
# - Smaller segment sizes for parallel processing

# Indexing Performance:
# - Fast flush intervals for real-time updates
# - Parallel indexing with multiple threads
# - Optimized segment management

# Scalability Features:
# - Cluster support for horizontal scaling
# - Automatic snapshots for data safety
# - Comprehensive monitoring and metrics

# ============================================================================
# DEPLOYMENT COMMANDS
# ============================================================================

# Docker deployment with this config:
# docker run -p 6333:6333 -p 6334:6334 \
#   -v $(pwd)/qdrant.yaml:/qdrant/config/production.yaml \
#   -v qdrant_storage:/qdrant/storage \
#   qdrant/qdrant:v1.7.0 \
#   ./qdrant --config-path /qdrant/config/production.yaml

# Docker Compose service:
# qdrant:
#   image: qdrant/qdrant:v1.7.0
#   ports:
#     - "6333:6333"
#     - "6334:6334"
#   volumes:
#     - ./config/qdrant.yaml:/qdrant/config/production.yaml
#     - qdrant_data:/qdrant/storage
#   command: ./qdrant --config-path /qdrant/config/production.yaml

# Environment Variables:
# QDRANT_API_KEY=your_secure_api_key
# QDRANT_LOG_LEVEL=INFO
# QDRANT__SERVICE__GRPC_PORT=6334
# QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=8