# Redis Configuration for Multi-Agent Voice AI System
# Optimized for <1ms cache retrieval and high-frequency vector caching
# Target: Sub-millisecond response times with 99.99% availability

# ============================================================================
# NETWORK AND CONNECTION SETTINGS
# ============================================================================

# Bind to all interfaces (secure with firewall in production)
bind 0.0.0.0

# Standard Redis port
port 6379

# Enable protected mode (disable only if properly secured)
protected-mode yes

# Password authentication (set via environment variable)
# requirepass VoiceAI_Redis_2024!

# Connection settings for high concurrency
tcp-backlog 511
tcp-keepalive 300
timeout 0

# Maximum number of connected clients
maxclients 10000

# ============================================================================
# MEMORY OPTIMIZATION FOR VOICE AI CACHING
# ============================================================================

# Maximum memory limit (adjust based on available RAM)
maxmemory 2gb

# Memory eviction policy optimized for caching
maxmemory-policy allkeys-lru

# Memory sampling for eviction
maxmemory-samples 5

# Memory efficiency settings
hash-max-ziplist-entries 1000
hash-max-ziplist-value 1024
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation
hll-sparse-max-bytes 3000

# ============================================================================
# PERSISTENCE CONFIGURATION
# ============================================================================

# RDB snapshots for data safety
save 900 1    # Save if at least 1 key changed in 900 seconds
save 300 10   # Save if at least 10 keys changed in 300 seconds  
save 60 10000 # Save if at least 10000 keys changed in 60 seconds

# RDB file settings
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename voice-ai-cache.rdb
dir /data

# AOF persistence for maximum data safety
appendonly yes
appendfilename "voice-ai-cache.aof"

# AOF fsync policy for performance/safety balance
appendfsync everysec

# AOF rewrite settings
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes

# ============================================================================
# PERFORMANCE TUNING FOR LOW LATENCY
# ============================================================================

# Disable slow operations logging for maximum performance
slowlog-log-slower-than -1
slowlog-max-len 0

# Latency monitoring (enable for debugging)
latency-monitor-threshold 0

# Client output buffer limits
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# TCP socket options for low latency
tcp-nodelay yes

# Redis memory allocator optimizations
# Use jemalloc for better memory management
# (automatically used if available)

# ============================================================================
# VOICE AI SPECIFIC OPTIMIZATIONS
# ============================================================================

# Database settings
databases 16

# Key expiration settings optimized for voice AI caching
# Most voice AI cache entries should expire quickly
notify-keyspace-events Ex

# Lazy deletion for better performance
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes

# ============================================================================
# THREADING AND CONCURRENCY
# ============================================================================

# I/O threads for high throughput (Redis 6.0+)
io-threads 4
io-threads-do-reads yes

# Background tasks
hz 10

# ============================================================================
# REPLICATION SETTINGS (FOR PRODUCTION HA)
# ============================================================================

# Replica settings (uncomment for production replication)
# replica-serve-stale-data yes
# replica-read-only yes
# repl-diskless-sync no
# repl-diskless-sync-delay 5
# replica-priority 100

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Disable dangerous commands in production
# rename-command FLUSHDB "FLUSH_VOICE_AI_CACHE_DB"
# rename-command FLUSHALL "FLUSH_VOICE_AI_CACHE_ALL"
# rename-command CONFIG "CONFIG_VOICE_AI_CACHE"
# rename-command DEBUG ""

# Enable keyspace notifications for monitoring
notify-keyspace-events "Ex"

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level for production (notice is recommended)
loglevel notice

# Log file location (empty string for stdout)
logfile "/var/log/redis/redis-server.log"

# Syslog settings
# syslog-enabled yes
# syslog-ident redis
# syslog-facility local0

# ============================================================================
# MODULES AND EXTENSIONS
# ============================================================================

# Redis modules for vector operations (if available)
# loadmodule /path/to/redisearch.so
# loadmodule /path/to/redisjson.so
# loadmodule /path/to/redisai.so

# ============================================================================
# VOICE AI CACHE SPECIFIC SETTINGS
# ============================================================================

# Custom configuration for voice AI workload patterns

# Hash field limit for vector metadata
hash-max-ziplist-entries 512

# String compression for vector data
# (Handled at application level for better performance)

# Set reasonable timeouts for voice AI operations
replica-read-timeout 60
repl-timeout 60

# ============================================================================
# MONITORING AND DIAGNOSTICS
# ============================================================================

# Enable latency monitoring for voice AI performance tuning
latency-monitor-threshold 100

# Extended statistics
extended-redis-compatibility yes

# ============================================================================
# MEMORY USAGE PATTERNS FOR VOICE AI
# ============================================================================

# Expected memory usage patterns:
# - Vector cache entries: ~1KB-10KB each
# - Session data: ~100B-1KB each  
# - Routing cache: ~10B-100B each
# - Agent state: ~1KB-5KB each

# Memory distribution (approximate):
# - 60% Vector embeddings and similarity caches
# - 20% Session and conversation state
# - 15% Agent routing and metadata caches
# - 5% Temporary computation results

# ============================================================================
# ENVIRONMENT SPECIFIC OVERRIDES
# ============================================================================

# Development Environment
# - Reduce memory limit: maxmemory 512mb
# - More frequent saves: save 60 1
# - Enable debug logging: loglevel debug

# Production Environment  
# - Increase memory: maxmemory 8gb
# - Enable replication
# - Restrict dangerous commands
# - Enable monitoring

# Testing Environment
# - Disable persistence for speed
# - Increase log verbosity
# - Enable all monitoring

# ============================================================================
# PERFORMANCE MONITORING COMMANDS
# ============================================================================

# Key monitoring commands for voice AI cache performance:
# 
# Memory usage:
# > INFO memory
# > MEMORY USAGE [key]
# 
# Performance stats:
# > INFO stats  
# > INFO commandstats
# 
# Latency monitoring:
# > LATENCY LATEST
# > LATENCY HISTORY [event]
# 
# Cache hit rates:
# > INFO stats (keyspace_hits vs keyspace_misses)
# 
# Connection info:
# > INFO clients
# > CLIENT LIST

# ============================================================================
# BACKUP AND RECOVERY
# ============================================================================

# Automatic backup commands:
# > BGSAVE (background snapshot)
# > BGREWRITEAOF (background AOF rewrite)

# Recovery procedures:
# 1. Stop Redis server
# 2. Replace RDB/AOF files
# 3. Start Redis server
# 4. Verify data integrity

# ============================================================================
# SCALING CONSIDERATIONS
# ============================================================================

# Horizontal scaling options:
# 1. Redis Cluster for automatic sharding
# 2. Redis Sentinel for high availability  
# 3. Application-level sharding by agent ID
# 4. Read replicas for read-heavy workloads

# Vertical scaling limits:
# - Single-threaded core operations
# - Memory limited by available RAM
# - Network I/O becomes bottleneck at high throughput

# ============================================================================
# TROUBLESHOOTING COMMON ISSUES
# ============================================================================

# High memory usage:
# - Check for large keys: MEMORY USAGE [key]
# - Review eviction policy
# - Monitor expired key cleanup

# High latency:
# - Check slow log: SLOWLOG GET
# - Monitor memory fragmentation
# - Review I/O thread configuration

# Connection issues:
# - Check maxclients setting
# - Monitor client connections: CLIENT LIST
# - Review network configuration

# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================

# Docker deployment:
# docker run -d --name redis-cache \
#   -p 6379:6379 \
#   -v $(pwd)/redis.conf:/usr/local/etc/redis/redis.conf \
#   -v redis_data:/data \
#   redis:7.2-alpine redis-server /usr/local/etc/redis/redis.conf

# Security checklist:
# 1. Set strong password via environment variable
# 2. Restrict network access with firewall
# 3. Disable dangerous commands
# 4. Enable SSL/TLS for production
# 5. Regular security updates

# Performance checklist:
# 1. Monitor memory usage and hit rates
# 2. Tune I/O threads for your workload
# 3. Optimize data structures for your use case
# 4. Regular performance benchmarking
# 5. Monitor and tune eviction policies